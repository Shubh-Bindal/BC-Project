{"ast":null,"code":"import Web3 from 'web3';\nimport { setGlobalState, getGlobalState } from './store';\nimport abi from './abis/DominionDAO.json';\nconst {\n  ethereum\n} = window;\nwindow.web3 = new Web3(ethereum);\nwindow.web3 = new Web3(window.web3.currentProvider);\nconst connectWallet = async () => {\n  try {\n    if (!ethereum) return alert('Please install Metamask');\n    const accounts = await ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n    setGlobalState('connectedAccount', accounts[0].toLowerCase());\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst isWallectConnected = async () => {\n  try {\n    if (!ethereum) return alert('Please install Metamask');\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    window.ethereum.on('chainChanged', chainId => {\n      window.location.reload();\n    });\n    window.ethereum.on('accountsChanged', async () => {\n      setGlobalState('connectedAccount', accounts[0].toLowerCase());\n      await isWallectConnected();\n    });\n    if (accounts.length) {\n      setGlobalState('connectedAccount', accounts[0].toLowerCase());\n    } else {\n      alert('Please connect wallet.');\n      console.log('No accounts found.');\n    }\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst getEtheriumContract = async () => {\n  const connectedAccount = getGlobalState('connectedAccount');\n  if (connectedAccount) {\n    const web3 = window.web3;\n    const networkId = await web3.eth.net.getId();\n    const networkData = await abi.networks[networkId];\n    if (networkData) {\n      const contract = new web3.eth.Contract(abi.abi, networkData.address);\n      return contract;\n    } else {\n      return null;\n    }\n  } else {\n    return getGlobalState('contract');\n  }\n};\nconst performContribute = async amount => {\n  try {\n    amount = window.web3.utils.toWei(amount.toString(), 'ether');\n    const contract = await getEtheriumContract();\n    const account = getGlobalState('connectedAccount');\n    await contract.methods.contribute().send({\n      from: account,\n      value: amount\n    });\n    window.location.reload();\n  } catch (error) {\n    reportError(error);\n    return error;\n  }\n};\nconst getInfo = async () => {\n  try {\n    if (!ethereum) return alert('Please install Metamask');\n    const contract = await getEtheriumContract();\n    const connectedAccount = getGlobalState('connectedAccount');\n    const isStakeholder = await contract.methods.isStakeholder().call({\n      from: connectedAccount\n    });\n    const balance = await contract.methods.daoBalance().call();\n    const mybalance = await contract.methods.getBalance().call({\n      from: connectedAccount\n    });\n    setGlobalState('balance', window.web3.utils.fromWei(balance));\n    setGlobalState('mybalance', window.web3.utils.fromWei(mybalance));\n    setGlobalState('isStakeholder', isStakeholder);\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst raiseProposal = async _ref => {\n  let {\n    title,\n    description,\n    beneficiary,\n    amount\n  } = _ref;\n  try {\n    amount = window.web3.utils.toWei(amount.toString(), 'ether');\n    const contract = await getEtheriumContract();\n    const account = getGlobalState('connectedAccount');\n    await contract.methods.createProposal(title, description, beneficiary, amount).send({\n      from: account\n    });\n    window.location.reload();\n  } catch (error) {\n    reportError(error);\n    return error;\n  }\n};\nconst getProposals = async () => {\n  try {\n    if (!ethereum) return alert('Please install Metamask');\n    const contract = await getEtheriumContract();\n    const proposals = await contract.methods.getProposals().call();\n    setGlobalState('proposals', structuredProposals(proposals));\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst structuredProposals = proposals => {\n  return proposals.map(proposal => ({\n    id: proposal.id,\n    amount: window.web3.utils.fromWei(proposal.amount),\n    title: proposal.title,\n    description: proposal.description,\n    paid: proposal.paid,\n    passed: proposal.passed,\n    proposer: proposal.proposer,\n    upvotes: Number(proposal.upvotes),\n    downvotes: Number(proposal.downvotes),\n    beneficiary: proposal.beneficiary,\n    executor: proposal.executor,\n    duration: proposal.duration\n  })).reverse();\n};\nconst getProposal = async id => {\n  try {\n    const proposals = getGlobalState('proposals');\n    return proposals.find(proposal => proposal.id == id);\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst voteOnProposal = async (proposalId, supported) => {\n  try {\n    const contract = await getEtheriumContract();\n    const account = getGlobalState('connectedAccount');\n    await contract.methods.performVote(proposalId, supported).send({\n      from: account\n    });\n    window.location.reload();\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst listVoters = async id => {\n  try {\n    const contract = await getEtheriumContract();\n    const votes = await contract.methods.getVotesOf(id).call();\n    return votes;\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst payoutBeneficiary = async id => {\n  try {\n    const contract = await getEtheriumContract();\n    const account = getGlobalState('connectedAccount');\n    await contract.methods.payBeneficiary(id).send({\n      from: account\n    });\n    window.location.reload();\n  } catch (error) {\n    reportError(error);\n  }\n};\nconst reportError = error => {\n  console.log(JSON.stringify(error), 'red');\n  throw new Error('No ethereum object.');\n};\nexport { isWallectConnected, connectWallet, performContribute, getInfo, raiseProposal, getProposals, getProposal, voteOnProposal, listVoters, payoutBeneficiary };","map":{"version":3,"names":["Web3","setGlobalState","getGlobalState","abi","ethereum","window","web3","currentProvider","connectWallet","alert","accounts","request","method","toLowerCase","error","reportError","isWallectConnected","on","chainId","location","reload","length","console","log","getEtheriumContract","connectedAccount","networkId","eth","net","getId","networkData","networks","contract","Contract","address","performContribute","amount","utils","toWei","toString","account","methods","contribute","send","from","value","getInfo","isStakeholder","call","balance","daoBalance","mybalance","getBalance","fromWei","raiseProposal","title","description","beneficiary","createProposal","getProposals","proposals","structuredProposals","map","proposal","id","paid","passed","proposer","upvotes","Number","downvotes","executor","duration","reverse","getProposal","find","voteOnProposal","proposalId","supported","performVote","listVoters","votes","getVotesOf","payoutBeneficiary","payBeneficiary","JSON","stringify","Error"],"sources":["G:/data_files/20BCS121/6th Sem/Blockchain Technology/blockchainProject/src/Blockchain.services.jsx"],"sourcesContent":["import Web3 from 'web3'\r\nimport { setGlobalState, getGlobalState } from './store'\r\nimport abi from './abis/DominionDAO.json'\r\n\r\nconst { ethereum } = window\r\nwindow.web3 = new Web3(ethereum)\r\nwindow.web3 = new Web3(window.web3.currentProvider)\r\n\r\nconst connectWallet = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\r\n    setGlobalState('connectedAccount', accounts[0].toLowerCase())\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst isWallectConnected = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n    const accounts = await ethereum.request({ method: 'eth_accounts' })\r\n\r\n    window.ethereum.on('chainChanged', (chainId) => {\r\n      window.location.reload()\r\n    })\r\n\r\n    window.ethereum.on('accountsChanged', async () => {\r\n      setGlobalState('connectedAccount', accounts[0].toLowerCase())\r\n      await isWallectConnected()\r\n    })\r\n\r\n    if (accounts.length) {\r\n      setGlobalState('connectedAccount', accounts[0].toLowerCase())\r\n    } else {\r\n      alert('Please connect wallet.')\r\n      console.log('No accounts found.')\r\n    }\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst getEtheriumContract = async () => {\r\n  const connectedAccount = getGlobalState('connectedAccount')\r\n\r\n  if (connectedAccount) {\r\n    const web3 = window.web3\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = await abi.networks[networkId]\r\n    if (networkData) {\r\n      const contract = new web3.eth.Contract(abi.abi, networkData.address)\r\n      return contract\r\n    } else {\r\n      return null\r\n    }\r\n  } else {\r\n    return getGlobalState('contract')\r\n  }\r\n}\r\n\r\nconst performContribute = async (amount) => {\r\n  try {\r\n    amount = window.web3.utils.toWei(amount.toString(), 'ether')\r\n    const contract = await getEtheriumContract()\r\n    const account = getGlobalState('connectedAccount')\r\n\r\n    await contract.methods.contribute().send({ from: account, value: amount })\r\n\r\n    window.location.reload()\r\n  } catch (error) {\r\n    reportError(error)\r\n    return error\r\n  }\r\n}\r\n\r\nconst getInfo = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n\r\n    const contract = await getEtheriumContract()\r\n    const connectedAccount = getGlobalState('connectedAccount')\r\n    const isStakeholder = await contract.methods\r\n      .isStakeholder()\r\n      .call({ from: connectedAccount })\r\n    const balance = await contract.methods.daoBalance().call()\r\n    const mybalance = await contract.methods\r\n      .getBalance()\r\n      .call({ from: connectedAccount })\r\n    setGlobalState('balance', window.web3.utils.fromWei(balance))\r\n    setGlobalState('mybalance', window.web3.utils.fromWei(mybalance))\r\n    setGlobalState('isStakeholder', isStakeholder)\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst raiseProposal = async ({ title, description, beneficiary, amount }) => {\r\n  try {\r\n    amount = window.web3.utils.toWei(amount.toString(), 'ether')\r\n    const contract = await getEtheriumContract()\r\n    const account = getGlobalState('connectedAccount')\r\n\r\n    await contract.methods\r\n      .createProposal(title, description, beneficiary, amount)\r\n      .send({ from: account })\r\n\r\n    window.location.reload()\r\n  } catch (error) {\r\n    reportError(error)\r\n    return error\r\n  }\r\n}\r\n\r\nconst getProposals = async () => {\r\n  try {\r\n    if (!ethereum) return alert('Please install Metamask')\r\n\r\n    const contract = await getEtheriumContract()\r\n    const proposals = await contract.methods.getProposals().call()\r\n    setGlobalState('proposals', structuredProposals(proposals))\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst structuredProposals = (proposals) => {\r\n  return proposals\r\n    .map((proposal) => ({\r\n      id: proposal.id,\r\n      amount: window.web3.utils.fromWei(proposal.amount),\r\n      title: proposal.title,\r\n      description: proposal.description,\r\n      paid: proposal.paid,\r\n      passed: proposal.passed,\r\n      proposer: proposal.proposer,\r\n      upvotes: Number(proposal.upvotes),\r\n      downvotes: Number(proposal.downvotes),\r\n      beneficiary: proposal.beneficiary,\r\n      executor: proposal.executor,\r\n      duration: proposal.duration,\r\n    }))\r\n    .reverse()\r\n}\r\n\r\nconst getProposal = async (id) => {\r\n  try {\r\n    const proposals = getGlobalState('proposals')\r\n    return proposals.find((proposal) => proposal.id == id)\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst voteOnProposal = async (proposalId, supported) => {\r\n  try {\r\n    const contract = await getEtheriumContract()\r\n    const account = getGlobalState('connectedAccount')\r\n    await contract.methods\r\n      .performVote(proposalId, supported)\r\n      .send({ from: account })\r\n\r\n    window.location.reload()\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst listVoters = async (id) => {\r\n  try {\r\n    const contract = await getEtheriumContract()\r\n    const votes = await contract.methods.getVotesOf(id).call()\r\n    return votes\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst payoutBeneficiary = async (id) => {\r\n  try {\r\n    const contract = await getEtheriumContract()\r\n    const account = getGlobalState('connectedAccount')\r\n    await contract.methods.payBeneficiary(id).send({ from: account })\r\n    window.location.reload()\r\n  } catch (error) {\r\n    reportError(error)\r\n  }\r\n}\r\n\r\nconst reportError = (error) => {\r\n  console.log(JSON.stringify(error), 'red')\r\n  throw new Error('No ethereum object.')\r\n}\r\n\r\nexport {\r\n  isWallectConnected,\r\n  connectWallet,\r\n  performContribute,\r\n  getInfo,\r\n  raiseProposal,\r\n  getProposals,\r\n  getProposal,\r\n  voteOnProposal,\r\n  listVoters,\r\n  payoutBeneficiary\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}