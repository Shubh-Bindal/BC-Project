{"ast":null,"code":"import { useReducer as t, useEffect as e, useRef as r, useState as o, useCallback as n } from \"react\";\nfunction s() {\n  return (s = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var r = arguments[e];\n      for (var o in r) Object.prototype.hasOwnProperty.call(r, o) && (t[o] = r[o]);\n    }\n    return t;\n  }).apply(this, arguments);\n}\nconst c = (t, e) => {\n    if (!t.includes(e)) throw new Error(`'${e}' not found. It must be provided in initialState as a property key.`);\n  },\n  a = \"production\" !== process.env.NODE_ENV ? Symbol(\"UPDATE_STATE\") : Symbol(),\n  l = (l, u) => {\n    const i = Object.keys(u);\n    let p = u,\n      d = null;\n    const f = {};\n    i.forEach(t => {\n      f[t] = new Set();\n    });\n    const E = (t, e) => e.type === a ? e.r ? e.r(t) : e.e : l(t, e),\n      S = (t, e) => {\n        \"production\" !== process.env.NODE_ENV && c(i, t);\n        const r = r => {\n          return s({}, r, {\n            [t]: (o = r[t], n = e, \"function\" == typeof n ? n(o) : n)\n          });\n          var o, n;\n        };\n        if (d) d({\n          type: a,\n          r\n        });else {\n          p = r(p);\n          const e = p[t];\n          f[t].forEach(t => t(e));\n        }\n      },\n      b = (t, e) => {\n        i.forEach(r => {\n          const o = e[r];\n          t[r] !== o && f[r].forEach(t => t(o));\n        });\n      };\n    return {\n      useGlobalStateProvider: () => {\n        const [o, n] = t(E, p);\n        e(() => {\n          if (d) throw new Error(\"Only one global state provider is allowed\");\n          return d = n, n({\n            type: a,\n            e: p\n          }), () => {\n            d = null;\n          };\n        }, []);\n        const s = r(o);\n        b(s.current, o), s.current = o, e(() => {\n          p = o;\n        }, [o]);\n      },\n      useGlobalState: t => {\n        \"production\" !== process.env.NODE_ENV && c(i, t);\n        const [r, s] = o(p[t]);\n        return e(() => (f[t].add(s), s(p[t]), () => {\n          f[t].delete(s);\n        }), [t]), [r, n(e => S(t, e), [t])];\n      },\n      getGlobalState: t => (\"production\" !== process.env.NODE_ENV && c(i, t), p[t]),\n      setGlobalState: S,\n      getState: () => p,\n      setState: t => {\n        if (d) d({\n          type: a,\n          e: t\n        });else {\n          const e = p;\n          p = t, b(e, p);\n        }\n      },\n      dispatch: t => {\n        if (d) d(t);else {\n          const e = p;\n          p = l(p, t), b(e, p);\n        }\n        return t;\n      }\n    };\n  },\n  u = t => l((t, e) => t, t),\n  i = function (t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t(void 0, {\n      type: void 0\n    });\n    let r = arguments.length > 2 ? arguments[2] : undefined;\n    return r ? r(i)(t, e) : l(t, e);\n  },\n  p = () => {\n    if (!window.__REDUX_DEVTOOLS_EXTENSION__) return t => t;\n    const {\n      before: t,\n      after: e\n    } = (() => {\n      let t, e;\n      return {\n        before: r => (o, n, c) => {\n          if (t = o, e = n, c) return c(r)(o, n);\n          const a = r(o, n);\n          return s({}, a, {\n            useGlobalState: t => {\n              const [e] = a.useGlobalState(t);\n              return [e, () => {\n                throw new Error(\"Update is not allowed when using DevTools\");\n              }];\n            }\n          });\n        },\n        after: r => (o, n, c) => {\n          if (c) return c(r)(o, n);\n          const a = r(t, e);\n          let l = s({}, o(n, {\n            type: \"@@redux/INIT\"\n          }), e);\n          const u = [];\n          return s({}, a, {\n            getState: () => l,\n            dispatch: t => (l = o(l, t), a.setState(l.computedStates[l.currentStateIndex].state), u.forEach(t => t()), t),\n            subscribe: t => (u.push(t), () => {\n              const e = u.indexOf(t);\n              u.splice(e, 1);\n            })\n          });\n        }\n      };\n    })();\n    return function () {\n      for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {\n        t[_key] = arguments[_key];\n      }\n      return t.reduce((t, e) => function () {\n        return t(e(...arguments));\n      });\n    }(t, window.__REDUX_DEVTOOLS_EXTENSION__(), e);\n  };\nexport { u as createGlobalState, i as createStore, p as reduxDevToolsExt };","map":{"version":3,"mappings":"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","names":["validateStateKey","keys","stateKey","includes","Error","UPDATE_STATE","process","env","NODE_ENV","Symbol","createContainer","reducer","initialState","Object","globalState","linkedDispatch","listeners","forEach","key","Set","patchedReducer","state","action","type","r","e","setGlobalState","update","updater","previousState","oldValue","newValue","nextPartialState","listener","notifyListeners","prevState","nextState","useGlobalStateProvider","dispatch","useReducer","useEffect","prevGlobalState","useRef","current","useGlobalState","partialState","setPartialState","useState","add","delete","useCallback","u","getGlobalState","getState","setState","nextGlobalState","createGlobalState","_action","createStore","undefined","enhancer","reduxDevToolsExt","window","__REDUX_DEVTOOLS_EXTENSION__","f","before","after","savedReducer","savedInitialState","store","value","devState","computedStates","currentStateIndex","subscribe","push","index","indexOf","splice","createEnhancers","fns","reduce","p","c","args"],"sources":["C:\\Users\\Sreedeva\\Desktop\\block_dao\\node_modules\\react-hooks-global-state\\src\\createContainer.ts","C:\\Users\\Sreedeva\\Desktop\\block_dao\\node_modules\\react-hooks-global-state\\src\\createGlobalState.ts","C:\\Users\\Sreedeva\\Desktop\\block_dao\\node_modules\\react-hooks-global-state\\src\\createStore.ts","C:\\Users\\Sreedeva\\Desktop\\block_dao\\node_modules\\react-hooks-global-state\\src\\devtools.ts"],"sourcesContent":["import {\n  Dispatch,\n  Reducer,\n  SetStateAction,\n  useCallback,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\n\n// utility functions\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst isFunction = (fn: unknown): fn is Function => (typeof fn === 'function');\n\nconst updateValue = <Value>(oldValue: Value, newValue: SetStateAction<Value>) => {\n  if (isFunction(newValue)) {\n    return newValue(oldValue);\n  }\n  return newValue;\n};\n\nconst validateStateKey = (keys: string[], stateKey: string) => {\n  if (!keys.includes(stateKey)) {\n    throw new Error(`'${stateKey}' not found. It must be provided in initialState as a property key.`);\n  }\n};\n\n// constants\n\nconst UPDATE_STATE = (\n  process.env.NODE_ENV !== 'production' ? Symbol('UPDATE_STATE')\n  /* for production */ : Symbol()\n);\n\nconst PROP_UPDATER = 'r';\nconst PROP_STATE = 'e';\n\n// createContainer\n\nexport const createContainer = <State, Action>(\n  reducer: Reducer<State, Action>,\n  initialState: State,\n) => {\n  type StateKeys = keyof State;\n  const keys = Object.keys(initialState);\n\n  let globalState = initialState;\n\n  type PA1 = { type: typeof UPDATE_STATE; [PROP_UPDATER]: (prev: State) => State };\n  type PA2 = { type: typeof UPDATE_STATE; [PROP_STATE]: State };\n  type PatchAction = PA1 | PA2;\n  let linkedDispatch: Dispatch<Action | PatchAction> | null = null;\n\n  const listeners = {} as {\n    [StateKey in StateKeys]: Set<Dispatch<SetStateAction<State[StateKey]>>>;\n  };\n  keys.forEach((key) => { listeners[key as StateKeys] = new Set(); });\n\n  const patchedReducer = (state: State, action: Action | PatchAction) => {\n    // how can it be typed more properly?\n    if ((action as { type: unknown }).type === UPDATE_STATE) {\n      return (action as { [PROP_UPDATER]: unknown })[PROP_UPDATER]\n        ? (action as PA1)[PROP_UPDATER](state)\n        : (action as PA2)[PROP_STATE];\n    }\n    return reducer(state, action as Action);\n  };\n\n  const setGlobalState = <StateKey extends StateKeys>(\n    stateKey: StateKey,\n    update: SetStateAction<State[StateKey]>,\n  ) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const updater = (previousState: State): State => ({\n      ...previousState,\n      [stateKey]: updateValue(previousState[stateKey], update),\n    });\n    if (linkedDispatch) {\n      linkedDispatch({ type: UPDATE_STATE, [PROP_UPDATER]: updater });\n    } else {\n      globalState = updater(globalState);\n      const nextPartialState = globalState[stateKey];\n      listeners[stateKey].forEach((listener) => listener(nextPartialState));\n    }\n  };\n\n  const notifyListeners = (prevState: State, nextState: State) => {\n    keys.forEach((key) => {\n      const nextPartialState = nextState[key as StateKeys];\n      if (prevState[key as StateKeys] !== nextPartialState) {\n        listeners[key as StateKeys].forEach((listener) => listener(nextPartialState));\n      }\n    });\n  };\n\n  const useGlobalStateProvider = () => {\n    const [state, dispatch] = useReducer(patchedReducer, globalState);\n    useEffect(() => {\n      if (linkedDispatch) throw new Error('Only one global state provider is allowed');\n      linkedDispatch = dispatch;\n      // in case it's changed before this effect is handled\n      dispatch({ type: UPDATE_STATE, [PROP_STATE]: globalState });\n      const cleanup = () => {\n        linkedDispatch = null;\n      };\n      return cleanup;\n    }, []);\n    const prevGlobalState = useRef(state);\n    notifyListeners(prevGlobalState.current, state);\n    prevGlobalState.current = state;\n    useEffect(() => {\n      globalState = state;\n    }, [state]);\n  };\n\n  const useGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    const [partialState, setPartialState] = useState(globalState[stateKey]);\n    useEffect(() => {\n      listeners[stateKey].add(setPartialState);\n      setPartialState(globalState[stateKey]); // in case it's changed before this effect is handled\n      const cleanup = () => {\n        listeners[stateKey].delete(setPartialState);\n      };\n      return cleanup;\n    }, [stateKey]);\n    const updater = useCallback(\n      (u: SetStateAction<State[StateKey]>) => setGlobalState(stateKey, u),\n      [stateKey],\n    );\n    return [partialState, updater] as const;\n  };\n\n  const getGlobalState = <StateKey extends StateKeys>(stateKey: StateKey) => {\n    if (process.env.NODE_ENV !== 'production') {\n      validateStateKey(keys, stateKey as string);\n    }\n    return globalState[stateKey];\n  };\n\n  const getWholeState = () => globalState;\n\n  const setWholeState = (nextGlobalState: State) => {\n    if (linkedDispatch) {\n      linkedDispatch({ type: UPDATE_STATE, [PROP_STATE]: nextGlobalState });\n    } else {\n      const prevGlobalState = globalState;\n      globalState = nextGlobalState;\n      notifyListeners(prevGlobalState, globalState);\n    }\n  };\n\n  const dispatchAction = (action: Action) => {\n    if (linkedDispatch) {\n      linkedDispatch(action);\n    } else {\n      const prevGlobalState = globalState;\n      globalState = reducer(globalState, action);\n      notifyListeners(prevGlobalState, globalState);\n    }\n    return action;\n  };\n\n  return {\n    useGlobalStateProvider,\n    useGlobalState,\n    getGlobalState,\n    setGlobalState,\n    getState: getWholeState,\n    setState: setWholeState, // for devtools.js\n    dispatch: dispatchAction,\n  };\n};\n","import { createContainer } from './createContainer';\n\ntype ExportFields =\n  | 'useGlobalStateProvider'\n  | 'useGlobalState'\n  | 'getGlobalState'\n  | 'setGlobalState';\n\n/**\n * create a global state\n *\n * It returns a set of functions\n * - `useGlobalState`: a custom hook works like React.useState\n * - `getGlobalState`: a function to get a global state by key outside React\n * - `setGlobalState`: a function to set a global state by key outside React\n *\n * @example\n * import { createGlobalState } from 'react-hooks-global-state';\n *\n * const { useGlobalState } = createGlobalState({ count: 0 });\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createGlobalState = <State>(initialState: State) => {\n  const store = createContainer((state: State, _action: never) => state, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","import { Reducer } from 'react';\n\nimport { createContainer } from './createContainer';\n\ntype Enhancer<Creator> = (creator: Creator) => Creator;\n\ntype ExportFields =\n  | 'useGlobalStateProvider'\n  | 'useGlobalState'\n  | 'getState'\n  | 'dispatch';\n\n/**\n * create a global store\n *\n * In additon to `useGlobaState` which is the same hook as in createGlobalState,\n * a store has `getState` and `dispatch`.\n * A store works somewhat similarly to Redux, but not the same.\n *\n * @example\n * import { createStore } from 'react-hooks-global-state';\n *\n * const initialState = { count: 0 };\n * const reducer = ...;\n *\n * const store = createStore(reducer, initialState);\n * const { useGlobalState } = store;\n *\n * const Component = () => {\n *   const [count, setCount] = useGlobalState('count');\n *   ...\n * };\n */\nexport const createStore = <State, Action>(\n  reducer: Reducer<State, Action>,\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  initialState: State = (reducer as any)(undefined, { type: undefined }),\n  enhancer?: Enhancer<any>,\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n) => {\n  if (enhancer) return enhancer(createStore)(reducer, initialState) as never;\n  const store = createContainer(reducer, initialState);\n  return store as Pick<typeof store, ExportFields>;\n};\n","/* eslint @typescript-eslint/no-explicit-any: off */\n\nconst compose = (...fns: any[]) => fns.reduce((p, c) => (...args: any[]) => p(c(...args)));\n\nconst initAction = () => ({ type: '@@redux/INIT' });\n\nconst createEnhancers = () => {\n  let savedReducer: any;\n  let savedInitialState: any;\n  const before = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    savedReducer = reducer;\n    savedInitialState = initialState;\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(reducer, initialState);\n    return {\n      ...store,\n      useGlobalState: (stateKey: any) => {\n        const [value] = store.useGlobalState(stateKey);\n        const MESG = 'Update is not allowed when using DevTools';\n        return [value, () => { throw new Error(MESG); }];\n      },\n    };\n  };\n  const after = (createStore: any) => (reducer: any, initialState: any, enhancer: any) => {\n    if (enhancer) return enhancer(createStore)(reducer, initialState);\n    const store = createStore(savedReducer, savedInitialState);\n    let devState = {\n      ...reducer(initialState, initAction()),\n      ...savedInitialState,\n    };\n    const getState = () => devState;\n    const listeners: any = [];\n    const dispatch = (action: any) => {\n      devState = reducer(devState, action);\n      store.setState(devState.computedStates[devState.currentStateIndex].state);\n      listeners.forEach((f: any) => f());\n      return action;\n    };\n    const subscribe = (listener: any) => {\n      listeners.push(listener);\n      const unsubscribe = () => {\n        const index = listeners.indexOf(listener);\n        listeners.splice(index, 1);\n      };\n      return unsubscribe;\n    };\n    return {\n      ...store,\n      getState,\n      dispatch,\n      subscribe,\n    };\n  };\n  return { before, after };\n};\n\nexport const reduxDevToolsExt = () => {\n  if (!(window as any).__REDUX_DEVTOOLS_EXTENSION__) return (f: any) => f;\n  const { before, after } = createEnhancers();\n  return compose(\n    before,\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n    after,\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}